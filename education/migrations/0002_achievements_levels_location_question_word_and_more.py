# Generated by Django 5.2.1 on 2025-06-02 19:56

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('education', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Достижения')),
                ('desc', models.TextField(verbose_name='Описание достижения')),
                ('icon_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='Ссылка на изображение')),
                ('condition_json', models.JSONField(default=dict, verbose_name='Условия получения')),
            ],
            options={
                'verbose_name': 'Достижение',
                'verbose_name_plural': 'Достижение',
            },
        ),
        migrations.CreateModel(
            name='Levels',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название уровня')),
                ('desc', models.TextField(blank=True, verbose_name='Тип уровня')),
                ('type', models.CharField(choices=[('TH', 'Теория'), ('TR', 'Испытание'), ('BS', 'Босс-файт')], max_length=2, verbose_name='Тип уровня')),
                ('exp_reward', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Награда опыта')),
                ('coins_reward', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Награда монет')),
                ('slug', models.SlugField(blank=True, max_length=250, unique=True, verbose_name='URL')),
            ],
            options={
                'verbose_name': 'Уровень',
                'verbose_name_plural': 'Уровни',
                'ordering': ['location', 'type'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True, verbose_name='Локация')),
                ('desc', models.TextField(blank=True, verbose_name='Описание')),
                ('slug', models.SlugField(blank=True, max_length=250, unique=True, verbose_name='URL')),
            ],
            options={
                'verbose_name': 'Локация',
                'verbose_name_plural': 'Локация',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
            ],
            options={
                'verbose_name': 'Вопрос',
                'verbose_name_plural': 'Вопросы',
            },
        ),
        migrations.CreateModel(
            name='Word',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=100)),
                ('translation', models.CharField(max_length=100)),
                ('category', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Слово',
                'verbose_name_plural': 'Слова',
            },
        ),
        migrations.AlterModelOptions(
            name='customuser',
            options={'verbose_name': 'Пользователь', 'verbose_name_plural': 'Пользователь'},
        ),
        migrations.CreateModel(
            name='Boss',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('boss_name', models.CharField(max_length=100)),
                ('desc', models.TextField(blank=True)),
                ('reward_exp', models.PositiveIntegerField(default=0)),
                ('reward_coins', models.PositiveIntegerField(default=0)),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='boss', to='education.levels')),
            ],
            options={
                'verbose_name': 'Босс',
                'verbose_name_plural': 'Боссы',
            },
        ),
        migrations.AddField(
            model_name='levels',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='levels', to='education.location', verbose_name='Локация'),
        ),
        migrations.CreateModel(
            name='LevelQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='level_questions', to='education.levels')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='education.question')),
            ],
            options={
                'verbose_name': 'Вопрос уровня',
                'verbose_name_plural': 'Вопросы уровней',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('is_correct', models.BooleanField()),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='education.question')),
            ],
            options={
                'verbose_name': 'Ответ',
                'verbose_name_plural': 'Ответы',
            },
        ),
        migrations.CreateModel(
            name='UserAchievements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='education.achievements')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Достижение пользователя',
                'verbose_name_plural': 'Достижения пользователей',
            },
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=50)),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='education.levels')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Прогресс пользователя',
                'verbose_name_plural': 'Прогресс пользователей',
            },
        ),
        migrations.CreateModel(
            name='BossWord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('boss', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='education.boss')),
                ('word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='education.word')),
            ],
            options={
                'verbose_name': 'Слово босса',
                'verbose_name_plural': 'Слова боссов',
            },
        ),
        migrations.AddConstraint(
            model_name='levels',
            constraint=models.CheckConstraint(condition=models.Q(('coins_reward', 0), ('exp_reward__gte', 0)), name='reward_constraints'),
        ),
    ]
